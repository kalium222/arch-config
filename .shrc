# !/bin/bash

# Some basic configurations such as
# alias, colors, functions and others
# should be sourced in whichever .xxshrc file


# ---------------------- ALIAS and COLOR ---------------------

# enable color support of ls, less and man, and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    export LS_COLORS="$LS_COLORS:ow=30;44:" # fix ls color for folders with 777 permissions

    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias diff='diff --color=auto'
    alias ip='ip --color=auto'

    export MANROFFOPT=-c
    export LESS=-R
    export LESS_TERMCAP_mb=$'\E[1;31m'     # begin blink
    export LESS_TERMCAP_md=$'\E[1;36m'     # begin bold
    export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
    export LESS_TERMCAP_so=$'\E[01;33m'    # begin reverse video
    export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
    export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
    export LESS_TERMCAP_ue=$'\E[0m'        # reset underline
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'



# ---------------------- OTHERS ---------------------

# ---------------- functions ----------------

# # prevent ranger from starting multiple times
# # if we need to run ranger with some options,
# # use sh -c "ranger -xxx"
# avoid_multiple_ranger() {
#     if [ -z "$RANGER_LEVEL" ]
#     then
#         sh -c ranger
#     else
#         exit
#     fi
# }
# alias ranger='avoid_multiple_ranger'

# yazi wrapper
function yazi_wrapper() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}
alias y='yazi_wrapper'

function fuck() {
    ah="
        ⣿⣿⣷⡁⢆⠈⠕⢕⢂⢕⢂⢕⢂⢔⢂⢕⢄⠂⣂⠂⠆⢂⢕⢂⢕⢂⢕⢂⢕⢂
        ⣿⣿⣿⡷⠊⡢⡹⣦⡑⢂⢕⢂⢕⢂⢕⢂⠕⠔⠌⠝⠛⠶⠶⢶⣦⣄⢂⢕⢂⢕
        ⣿⣿⠏⣠⣾⣦⡐⢌⢿⣷⣦⣅⡑⠕⠡⠐⢿⠿⣛⠟⠛⠛⠛⠛⠡⢷⡈⢂⢕⢂
        ⠟⣡⣾⣿⣿⣿⣿⣦⣑⠝⢿⣿⣿⣿⣿⣿⡵⢁⣤⣶⣶⣿⢿⢿⢿⡟⢻⣤⢑⢂
        ⣾⣿⣿⡿⢟⣛⣻⣿⣿⣿⣦⣬⣙⣻⣿⣿⣷⣿⣿⢟⢝⢕⢕⢕⢕⢽⣿⣿⣷⣔
        ⣿⣿⠵⠚⠉⢀⣀⣀⣈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣗⢕⢕⢕⢕⢕⢕⣽⣿⣿⣿⣿
        ⢷⣂⣠⣴⣾⡿⡿⡻⡻⣿⣿⣴⣿⣿⣿⣿⣿⣿⣷⣵⣵⣵⣷⣿⣿⣿⣿⣿⣿⡿
        ⢌⠻⣿⡿⡫⡪⡪⡪⡪⣺⣿⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃
        ⠣⡁⠹⡪⡪⡪⡪⣪⣾⣿⣿⣿⣿⠋⠐⢉⢍⢄⢌⠻⣿⣿⣿⣿⣿⣿⣿⣿⠏⠈
        ⡣⡘⢄⠙⣾⣾⣾⣿⣿⣿⣿⣿⣿⡀⢐⢕⢕⢕⢕⢕⡘⣿⣿⣿⣿⣿⣿⠏⠠⠈
        ⠌⢊⢂⢣⠹⣿⣿⣿⣿⣿⣿⣿⣿⣧⢐⢕⢕⢕⢕⢕⢅⣿⣿⣿⣿⡿⢋⢜⠠⠈
        ⠄⠁⠕⢝⡢⠈⠻⣿⣿⣿⣿⣿⣿⣿⣷⣕⣑⣑⣑⣵⣿⣿⣿⡿⢋⢔⢕⣿⠠⠈
        ⠨⡂⡀⢑⢕⡅⠂⠄⠉⠛⠻⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢋⢔⢕⢕⣿⣿⠠⠈
        ⠄⠪⣂⠁⢕⠆⠄⠂⠄⠁⡀⠂⡀⠄⢈⠉⢍⢛⢛⢛⢋⢔⢕⢕⢕⣽⣿⣿⠠⠈
"
    echo $ah
}

# set the proxy
setproxy() {
    local proxy_server="127.0.0.1"
    local socks5_port="20170"
    local http_port="20171"
    local http_rule_port="20172"
    if [ "$1" = "http" ]; then
        export http_proxy="http://${proxy_server}:${http_port}"
        export https_proxy="http://${proxy_server}:${http_port}"
        echo "HTTP proxy is set."
    elif [ "$1" = "socks5" ]; then
        export SOCKS5_PROXY="${proxy_server}:${socks5_port}"
        echo "SOCKS5 proxy is set."
    elif [ "$1" = "all" ] || [ "$1" = "on" ]; then
        export http_proxy="http://${proxy_server}:${http_rule_port}"
        export https_proxy="http://${proxy_server}:${http_rule_port}"
        export SOCKS5_PROXY="${proxy_server}:${socks5_port}"
        echo "ALL_PROXY is set."
    elif [ "$1" = "off" ]; then
        unset http_proxy
        unset https_proxy
        unset SOCKS5_PROXY
        echo "Proxy settings are unset."
    else
        echo "Usage: set_proxy on|all|http|socks5|off"
    fi
    # check the proxy
    echo "\nnow:"
    curl cip.cc
}

curl_github_repo() {
    local repo="$1"
    local branch="$2"
    local file="$3"

    local url="https://raw.githubusercontent.com/${repo}/${branch}/${file}"

    echo "Downloading $file from $repo@$branch..."
    curl -o "$file" "$url"
}

# ---------------- constants ----------------

# some aliases
alias v='nvim'
alias vi='nvim'
alias t='tmux'
alias f='fastfetch'
alias py='python3'
alias ewww='~/Public/eww/target/release/eww'

# env
export EDITOR='nvim'
export VISUAL='nvim'
export PATH="$PATH:$HOME/.cargo/bin"
export DOCKER_HOST="unix://$XDG_RUNTIME_DIR/podman/podman.sock"


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/Kalium/Applications/miniconda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/Kalium/Applications/miniconda/etc/profile.d/conda.sh" ]; then
        . "/home/Kalium/Applications/miniconda/etc/profile.d/conda.sh"
    else
        export PATH="/home/Kalium/Applications/miniconda/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


# ---------------- misc ----------------

__get_prompt_extra_info() {
    echo ${debian_chroot:+($debian_chroot)─}$(__get_conda_env)$(__get_py_venv)$(__get_nix_shell)
}

__get_nix_shell() {
    if [ -n "$IN_NIX_SHELL" ]; then
        echo " :${IN_NIX_SHELL}-"
    fi
}

__get_py_venv() {
    echo ${VIRTUAL_ENV:+{𝔓𝔶: $(basename $VIRTUAL_ENV)}─}
}

__get_conda_env() {
    CONDA_SYMBOL=" : "
    CONDA_ENV=""
    if [ -n "$CONDA_PREFIX" ]; then
        CONDA_DIR=$(basename $CONDA_PREFIX)
        if [ "$CONDA_DIR" == "anaconda" ]; then
            CONDA_ENV="base"
        else
            CONDA_ENV=$CONDA_DIR
        fi
    fi
    echo ${CONDA_PREFIX:+{${CONDA_SYMBOL}${CONDA_ENV}}─}
}

